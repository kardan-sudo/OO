import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import psycopg2
from get_db import *
from datetime import datetime, timedelta, timezone
from pathlib import Path
import time
import random
import json
from message import *
from AI_sum_request import generate_text_with_model

TOKEN = "vk1.a.qW_YVau62neDdXBg1aw4lHM2-ZsCd9L1ioQj29whg3YnVy51-9mryuW6LpDb-qbEHV0JT4LSJylheCuU5QNriqSgHjUEHxsH3Q_tZX8-DZw9tsukboNj6Uen9PK4Lh9-anRDGZFzIlRiuOZ4VtRFW8RwzUmLBPd0PpfDg8cSlTX22qc0kH09B608udpaKFUbdhqeDxx8JwlPEFYLzoHPfg"
GROUP_ID = '233031631'


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token=TOKEN)
longpoll = VkBotLongPoll(vk_session, GROUP_ID)
vk = vk_session.get_api()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def get_event_image_path(event_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    jpg_path = Path(f'/home/radmir/OO/back/static/events/{event_id}.jpg')
    if jpg_path.exists():
        return jpg_path
    
    jpeg_path = Path(f'/home/radmir/OO/back/static/events/{event_id}.jpeg')
    if jpeg_path.exists():
        return jpeg_path
    
    return None

def get_route_image_path(route_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞"""
    png_path = Path(f'/home/radmir/OO/back/static/routes/{route_id}.png')
    if png_path.exists():
        return png_path
    return None

def get_scenic_spot_image_path(spot_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∂–∏–≤–æ–ø–∏—Å–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
    jpg_path = Path(f'/home/radmir/OO/back/static/scenic/{spot_id}.jpg')
    if jpg_path.exists():
        return jpg_path
    
    jpeg_path = Path(f'/home/radmir/OO/back/static/scenic/{spot_id}.jpeg')
    if jpeg_path.exists():
        return jpeg_path
    
    return None

def safe_send_message(user_id, text, keyboard=None, attachment=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        params = {
            'user_id': user_id,
            'message': text,
            'random_id': random.randint(0, 2**63)
        }
        
        if keyboard:
            params['keyboard'] = keyboard
        if attachment:
            params['attachment'] = attachment
            
        return vk.messages.send(**params)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def upload_photo(user_id, image_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä VK –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç attachment"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        upload_url = vk.photos.getMessagesUploadServer(peer_id=user_id)['upload_url']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
        with open(image_path, 'rb') as photo_file:
            files = {'photo': photo_file}
            response = vk_session.http.post(upload_url, files=files)
        
        upload_result = response.json()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo_data = vk.photos.saveMessagesPhoto(
            server=upload_result['server'],
            photo=upload_result['photo'],
            hash=upload_result['hash']
        )[0]
        
        return f"photo{photo_data['owner_id']}_{photo_data['id']}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
        return None

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_button('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', color=VkKeyboardColor.PRIMARY)
    keyboard.add_button('–ú–∞—Ä—à—Ä—É—Ç—ã', color=VkKeyboardColor.PRIMARY)
    keyboard.add_line()
    keyboard.add_button('–ñ–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞', color=VkKeyboardColor.PRIMARY)
    return keyboard.get_keyboard()

def create_events_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    keyboard = VkKeyboard(one_time=False)
    events = get_event_list()
    for i, event in enumerate(events):
        if i > 0 and i % 2 == 0:
            keyboard.add_line()
        keyboard.add_button(event, color=VkKeyboardColor.SECONDARY)
    keyboard.add_line()
    keyboard.add_button('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', color=VkKeyboardColor.NEGATIVE)
    return keyboard.get_keyboard()

def create_routes_time_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_button('–¥–æ 2 —á–∞—Å–æ–≤', color=VkKeyboardColor.SECONDARY)
    keyboard.add_button('–¥–æ 3 —á–∞—Å–æ–≤', color=VkKeyboardColor.SECONDARY)
    keyboard.add_line()
    keyboard.add_button('–¥–æ 6 —á–∞—Å–æ–≤', color=VkKeyboardColor.SECONDARY)
    keyboard.add_button('–ù–µ–≤–∞–∂–Ω–æ', color=VkKeyboardColor.SECONDARY)
    keyboard.add_line()
    keyboard.add_button('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', color=VkKeyboardColor.NEGATIVE)
    return keyboard.get_keyboard()

def create_routes_difficulty_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_button('–õ–µ–≥–∫–∏–π', color=VkKeyboardColor.POSITIVE)
    keyboard.add_button('–°—Ä–µ–¥–Ω–∏–π', color=VkKeyboardColor.SECONDARY)
    keyboard.add_line()
    keyboard.add_button('–¢—è–∂–µ–ª—ã–π', color=VkKeyboardColor.NEGATIVE)
    keyboard.add_button('–õ—é–±–æ–π', color=VkKeyboardColor.SECONDARY)
    keyboard.add_line()
    keyboard.add_button('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', color=VkKeyboardColor.NEGATIVE)
    return keyboard.get_keyboard()

def create_navigation_keyboard(current_index, total_count, content_type):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    keyboard = VkKeyboard(inline=True)
    
    if current_index > 0:
        keyboard.add_callback_button('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', color=VkKeyboardColor.SECONDARY, payload={'command': f'prev_{content_type}'})
    
    keyboard.add_callback_button(f'{current_index + 1}/{total_count}', color=VkKeyboardColor.PRIMARY, payload={'command': 'page'})
    
    if current_index < total_count - 1:
        keyboard.add_callback_button('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', color=VkKeyboardColor.SECONDARY, payload={'command': f'next_{content_type}'})
    
    return keyboard.get_keyboard()

def format_event_message(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if data['event_type'] == '–í—ã—Å—Ç–∞–≤–∫–∏':
        date_start = data['start_date']
        date_end = data['end_date']
        return f'''{data['title']}

–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {date_start.strftime("%d.%m %H:%M")} - {date_end.strftime("%d.%m %H:%M")}
–ê–¥—Ä–µ—Å: {data['address']}

–û–ø–∏—Å–∞–Ω–∏–µ (–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ò–ò):
{data['description_summ']}

–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç—ã: {data['website']}'''
    else:
        date = data['start_date']
        return f'''{data['title']}

–ù–∞—á–∞–ª–æ: {date.strftime("%d.%m %H:%M")}
–ê–¥—Ä–µ—Å: {data['address']}

–û–ø–∏—Å–∞–Ω–∏–µ (–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ò–ò): 
{data['description_summ']}

–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏–ª–µ—Ç—ã: {data['website']}'''

def format_route_message(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞"""
    difficulty_emoji = {
        'easy': 'üü¢',
        'medium': 'üü°', 
        'hard': 'üî¥'
    }
    
    emoji = difficulty_emoji.get(data['difficulty'], '‚ö™')
    
    return f'''{data['title']}

{emoji} –°–ª–æ–∂–Ω–æ—Å—Ç—å: {data['difficulty'].capitalize() if data['difficulty'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration_minutes']} –º–∏–Ω—É—Ç

{data['description']}

–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç: {data['url']}'''

def format_scenic_spot_message(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∂–∏–≤–æ–ø–∏—Å–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
    return f'''{data['title']}

{data['description']}
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {data['opening_hours']}

–°—Ç–æ–∏–º–æ—Å—Ç—å: {data['entrance_fee']}

üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data['address']}'''

def send_item_message(user_id, caption, keyboard, data, item_type, first_time, state):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    if item_type == 'event':
        image_path = get_event_image_path(data['id'])
    elif item_type == 'route':
        image_path = get_route_image_path(data['id'])
    else:  # scenic_spot
        image_path = get_scenic_spot_image_path(data['id'])
    
    attachment = None
    if image_path and image_path.exists():
        attachment = upload_photo(user_id, image_path)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    safe_send_message(user_id, caption, keyboard=keyboard, attachment=attachment)

def show_event_and_route(user_id, items, item_type='event', first_time=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –∂–∏–≤–æ–ø–∏—Å–Ω—ã—Ö –º–µ—Å—Ç"""
    if user_id not in user_states:
        return

    state = user_states[user_id]
    current_index = state['current_index']
    
    if not items:
        safe_send_message(user_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return
    
    data = items[current_index]

    # –î–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if item_type == 'event':
        if (data['description_summ'] is None) or (data['description_summ'] == ''):
            description_summ = generate_text_with_model(AI_prompt + data['description'])
            data['description_summ'] = description_summ
            update_event_data_safe(data['id'], description_summ=description_summ)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = create_navigation_keyboard(current_index, len(items), item_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if item_type == 'event':
        caption = format_event_message(data)
    elif item_type == 'route':
        caption = format_route_message(data)
    else:  # scenic_spot
        caption = format_scenic_spot_message(data)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    send_item_message(user_id, caption, keyboard, data, item_type, first_time, state)

def handle_message(user_id, text):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text_lower = text.lower()
    
    if text_lower == '—Å—Ç–∞—Ä—Ç' or text_lower == '–Ω–∞—á–∞—Ç—å' or text_lower == '–≤–ø–µ—Ä—ë–¥!':
        safe_send_message(user_id, hello_mes, keyboard=create_main_keyboard())

    elif text_lower == '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
        safe_send_message(user_id, '**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**', keyboard=create_events_keyboard())

    elif text_lower == '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        safe_send_message(user_id, type_event_mes, keyboard=create_main_keyboard())

    elif text_lower == '–º–∞—Ä—à—Ä—É—Ç—ã':
        safe_send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞', keyboard=create_routes_time_keyboard())

    elif text_lower in ["–¥–æ 2 —á–∞—Å–æ–≤", "–¥–æ 3 —á–∞—Å–æ–≤", "–¥–æ 6 —á–∞—Å–æ–≤", '–Ω–µ–≤–∞–∂–Ω–æ']:
        time_dict = {
            "–¥–æ 2 —á–∞—Å–æ–≤": 120,
            "–¥–æ 3 —á–∞—Å–æ–≤": 180, 
            "–¥–æ 6 —á–∞—Å–æ–≤": 300,
            "–Ω–µ–≤–∞–∂–Ω–æ": 0
        }
        
        if user_id not in user_states:
            user_states[user_id] = {}
        
        user_states[user_id]['route_time'] = time_dict[text_lower]
        user_states[user_id]['waiting_for_difficulty'] = True

        safe_send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞', keyboard=create_routes_difficulty_keyboard())

    elif text_lower == '–∂–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞':
        scenic_spots = get_scenic_spots()
        
        user_states[user_id] = {
            'scenic_spots': scenic_spots,
            'current_index': 0,
            'content_type': 'scenic_spot'
        }
        
        show_event_and_route(user_id, scenic_spots, 'scenic_spot', first_time=True)

    elif text_lower in ["–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Ç—è–∂–µ–ª—ã–π", '–ª—é–±–æ–π']:
        difficulty_dict = {
            "–ª–µ–≥–∫–∏–π": "easy",
            "—Å—Ä–µ–¥–Ω–∏–π": "medium", 
            "—Ç—è–∂–µ–ª—ã–π": "hard",
            "–ª—é–±–æ–π": "NULL"
        }
        
        if (user_id in user_states and 
            'route_time' in user_states[user_id] and 
            user_states[user_id].get('waiting_for_difficulty')):
            
            selected_time = user_states[user_id]['route_time']
            selected_difficulty = difficulty_dict[text_lower]
            
            routes = get_routes(selected_time, selected_difficulty)
            
            user_states[user_id] = {
                'routes': routes,
                'current_index': 0,
                'content_type': 'route'
            }
            
            show_event_and_route(user_id, routes, 'route', first_time=True)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'route_time' in user_states[user_id]:
                del user_states[user_id]['route_time']
            if 'waiting_for_difficulty' in user_states[user_id]:
                del user_states[user_id]['waiting_for_difficulty']

    elif text_lower in ['–∫–æ–Ω—Ü–µ—Ä—Ç—ã', '—Å–ø–µ–∫—Ç–∞–∫–ª–∏', '–≤—ã—Å—Ç–∞–≤–∫–∏']:
        data_events = get_event_data(text)
        filtered_events = []
        
        for data in data_events:
            if text_lower == '–≤—ã—Å—Ç–∞–≤–∫–∏':
                date_start = data['start_date']
                date_end = data['end_date']
                now = datetime.now(timezone.utc)
                if now < date_end < now + timedelta(days=30):
                    filtered_events.append(data)
            else:
                date = data['start_date']
                now = datetime.now(timezone.utc)
                if now < date < now + timedelta(days=30):
                    filtered_events.append(data)
        
        user_states[user_id] = {
            'event_type': text_lower,
            'events': filtered_events,
            'current_index': 0,
            'content_type': 'event'
        }
        
        show_event_and_route(user_id, filtered_events, 'event', first_time=True)

    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        if user_id in user_states:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            # —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            return
        else:
            safe_send_message(user_id, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–°—Ç–∞—Ä—Ç'.")

def handle_callback(user_id, payload,event_id):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-—Å–æ–±—ã—Ç–∏–π"""
    try:
        if user_id not in user_states:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_states")
            return
        
        state = user_states[user_id]
        command = payload.get('command', '')
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {command} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ
        if 'events' in state:
            items = state['events']
            content_type = 'event'
        elif 'routes' in state:
            items = state['routes']
            content_type = 'route'
        elif 'scenic_spots' in state:
            items = state['scenic_spots']
            content_type = 'scenic_spot'
        else:
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        if command.startswith('prev_'):
            if state['current_index'] > 0:
                state['current_index'] -= 1
                show_event_and_route(user_id, items, content_type, first_time=False)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
                vk.messages.sendMessageEventAnswer(
                    event_id=event_id,
                    user_id=user_id,
                    peer_id=user_id,
                    event_data=json.dumps({'type': 'show_snackbar', 'text': '‚¨ÖÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É'})
                )
        
        elif command.startswith('next_'):
            if state['current_index'] < len(items) - 1:
                state['current_index'] += 1
                show_event_and_route(user_id, items, content_type, first_time=False)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
                vk.messages.sendMessageEventAnswer(
                    event_id=event_id,
                    user_id=user_id,
                    peer_id=user_id,
                    event_data=json.dumps({'type': 'show_snackbar', 'text': '‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É'})
                )
        
        elif command == 'page':
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
            vk.messages.sendMessageEventAnswer(
                event_id=event_id,
                user_id=user_id,
                peer_id=user_id,
                event_data=json.dumps({'type': 'show_snackbar', 'text': f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {state["current_index"] + 1} –∏–∑ {len(items)}'})
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    print("–ë–æ—Ç VK –∑–∞–ø—É—â–µ–Ω...")
    
    for event in longpoll.listen():
        try:
            if event.type == VkBotEventType.MESSAGE_NEW:
                message = event.object.message
                user_id = message['from_id']
                text = message['text']
                
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
                handle_message(user_id, text)
                
            elif event.type == VkBotEventType.MESSAGE_EVENT:
                user_id = event.object.user_id
                payload = event.object.payload
                event_id = event.object.event_id
                
                print(f"Callback –æ—Ç {user_id}: {payload}")
                handle_callback(user_id, payload, event_id)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}")

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        time.sleep(5)