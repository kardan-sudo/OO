import telebot
from telebot import types
import psycopg2
from get_db import get_event_list, get_event_data
from datetime import datetime, timedelta, timezone

bot = telebot.TeleBot('8286621737:AAHEZDZvZo-wG-hhpOpbFIx7TDDtPENHk7c')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start = types.KeyboardButton('–í–ø–µ—Ä—ë–¥!')
    markup.add(start)
    bot.send_message(message.from_user.id, '''
–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º –û—Ä–ª–∞ –∏ –û—Ä–ª–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏. üé≠üé®

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—ë —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ: –∫–æ–Ω—Ü–µ—Ä—Ç—ã üéµ, –≤—ã—Å—Ç–∞–≤–∫–∏ üñºÔ∏è, —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ üé¨ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –ø–æ –¥—É—à–µ, –∏ –ø–æ–ª—É—á–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö. üìÖ‚ú®

–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ —Å–æ–≤–µ—Ç—ã ‚Äî —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! ü§ñüí¨ –ì–æ—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –¥–æ—Å—É–≥ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º! –ü–æ–µ—Ö–∞–ª–∏? üöÄ
''', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == '–í–ø–µ—Ä—ë–¥!':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        event = types.KeyboardButton("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        route = types.KeyboardButton("–ú–∞—Ä—à—Ä—É—Ç—ã")
        pict_places = types.KeyboardButton("–ñ–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞")
        markup.add(event, route, pict_places)
        bot.send_message(message.from_user.id, '''
–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:

üóìÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Äî —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –û—Ä–ª–µ –∏ –û—Ä–ª–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã ‚Äî –ª—É—á—à–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω—É
üåÑ –ñ–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞ ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —É–≥–æ–ª–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã –∏ –∫—Ä–∞—Å–æ—Ç—ã —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π''', reply_markup=markup)

    elif message.text == '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        event_list = [types.KeyboardButton(event) for event in get_event_list()]
        event_list.append(types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        markup.add(*event_list)
        bot.send_message(message.from_user.id, '**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**', parse_mode='Markdown', reply_markup=markup)

    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        event = types.KeyboardButton("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
        route = types.KeyboardButton("–ú–∞—Ä—à—Ä—É—Ç—ã")
        pict_places = types.KeyboardButton("–ñ–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞")
        markup.add(event, route, pict_places)
        bot.send_message(message.from_user.id, '''
–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:

üóìÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Äî —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –û—Ä–ª–µ –∏ –û—Ä–ª–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã ‚Äî –ª—É—á—à–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω—É
üåÑ –ñ–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞ ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —É–≥–æ–ª–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã –∏ –∫—Ä–∞—Å–æ—Ç—ã —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π''', reply_markup=markup)

    elif message.text in ['–ö–æ–Ω—Ü–µ—Ä—Ç—ã', '–°–ø–µ–∫—Ç–∞–∫–ª–∏', '–í—ã—Å—Ç–∞–≤–∫–∏']:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö
        data_events = get_event_data(message.text)
        filtered_events = []
        
        for data in data_events:
            if message.text == '–í—ã—Å—Ç–∞–≤–∫–∏':
                date_start = data['start_date']
                date_end = data['end_date']
                now = datetime.now(timezone.utc)
                if now < date_end < now + timedelta(days=30):
                    filtered_events.append(data)
            else:
                date = data['start_date']
                now = datetime.now(timezone.utc)
                if now < date < now + timedelta(days=30):
                    filtered_events.append(data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_states[user_id] = {
            'event_type': message.text,
            'events': filtered_events,
            'current_index': 0,
            'message_id': None  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        show_event(user_id, first_time=True)

def show_event(user_id, first_time=False):
    if user_id not in user_states:
        return
    
    state = user_states[user_id]
    events = state['events']
    current_index = state['current_index']
    
    if not events:
        bot.send_message(user_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return
    
    data = events[current_index]
    event_type = state['event_type']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'prev_{event_type}'))
    
    nav_buttons.append(types.InlineKeyboardButton(f'{current_index + 1}/{len(events)}', callback_data='page'))
    
    if current_index < len(events) - 1:
        nav_buttons.append(types.InlineKeyboardButton('–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data=f'next_{event_type}'))
    
    markup.row(*nav_buttons)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if event_type == '–í—ã—Å—Ç–∞–≤–∫–∏':
        date_start = data['start_date']
        date_end = data['end_date']
        caption = f'''
*{data['title']}*

–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {date_start.strftime("%d.%m %H:%M")} - {date_end.strftime("%d.%m %H:%M")}
–ê–¥—Ä–µ—Å: {data['address']}

–û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:500]}{'...' if len(data['description']) > 500 else ''}

[–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç]({data['website']})
'''
        if first_time:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            try:
                with open('/home/radmir/Bots/Telegram/images.jpeg', 'rb') as photo:
                    sent_message = bot.send_photo(user_id, photo, caption=caption, parse_mode='Markdown', reply_markup=markup)
                    state['message_id'] = sent_message.message_id
                    state['has_photo'] = True
            except:
                sent_message = bot.send_message(user_id, caption, parse_mode='Markdown', reply_markup=markup)
                state['message_id'] = sent_message.message_id
                state['has_photo'] = False
        else:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if state.get('has_photo'):
                try:
                    bot.edit_message_caption(
                        chat_id=user_id,
                        message_id=state['message_id'],
                        caption=caption,
                        parse_mode='Markdown',
                        reply_markup=markup
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    with open('/home/radmir/Bots/Telegram/images.jpeg', 'rb') as photo:
                        sent_message = bot.send_photo(user_id, photo, caption=caption, parse_mode='Markdown', reply_markup=markup)
                        state['message_id'] = sent_message.message_id
            else:
                bot.edit_message_text(
                    chat_id=user_id,
                    message_id=state['message_id'],
                    text=caption,
                    parse_mode='Markdown',
                    reply_markup=markup
                )
    else:
        date = data['start_date']
        message_text = f'''
*{data['title']}*

–ù–∞—á–∞–ª–æ: {date.strftime("%d.%m %H:%M")}
–ê–¥—Ä–µ—Å: {data['address']}

–û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:500]}{'...' if len(data['description']) > 500 else ''}

[–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç]({data['website']})
'''
        if first_time:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = bot.send_message(user_id, message_text, parse_mode='Markdown', reply_markup=markup)
            state['message_id'] = sent_message.message_id
            state['has_photo'] = False
        else:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                chat_id=user_id,
                message_id=state['message_id'],
                text=message_text,
                parse_mode='Markdown',
                reply_markup=markup
            )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    data = call.data
    
    if user_id not in user_states:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    state = user_states[user_id]
    
    if data.startswith('prev_'):
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
        if state['current_index'] > 0:
            state['current_index'] -= 1
            show_event(user_id, first_time=False)
        bot.answer_callback_query(call.id)
    
    elif data.startswith('next_'):
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
        if state['current_index'] < len(state['events']) - 1:
            state['current_index'] += 1
            show_event(user_id, first_time=False)
        bot.answer_callback_query(call.id)
    
    elif data == 'page':
        bot.answer_callback_query(call.id, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {state['current_index'] + 1} –∏–∑ {len(state['events'])}")

bot.polling(none_stop=True, interval=0)